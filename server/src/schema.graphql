scalar DateTime

type Query {
  info: String!
  feed(filter: String, skip: Int, first: Int, orderBy: LinkOrderByInput): Feed!
  vendors: [Vendor!]!
  customers: [Customer!]!
  getCustomer(id: ID!): Customer
}

enum LinkOrderByInput {
  description_ASC
  description_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
}

type Feed {
  links: [Link!]!
  count: Int!
}

type Veed {
  vendors: [Vendor!]!
  count: Int!
}

type Mutation {
  post(url: String!, description: String!): Link!
  addVendor(name: String!, contact: String!): Vendor!
  updateVendor(id: ID!, name:String! , contact: String!):Vendor
  signup(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  vote(linkId: ID!): Vote!
  createCustomer(name: String!, contact: String!): Customer
  updateCustomer(id: ID!, name: String!, contact: String!): Customer
  deleteCustomer(id: ID!): Customer
}

type Subscription {
  newLink: Link
  newVote: Vote
  customerAdded: Customer
  customerEdited: Customer
  customerDeleted: Customer
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
  links: [Link!]!
  vendors: [Vendor!]!
  customers: [Customer!]!
}

type Link {
  id: ID!
  createdAt: DateTime!
  description: String!
  url: String!
  postedBy: User
  votes: [Vote!]!
}

type Vote {
  id: ID!
  link: Link!
  user: User!
}

type Vendor {
  id: ID!
  createdAt: DateTime!
  name: String!
  contact: String!
  postedBy: User
}

type VendorInput {
  name: String!
  contact: String!
}

type Customer {
  id: ID!
  name: String!
  contact: String!
  postedBy: User
}

type Bill {
  id: ID!
  vendor: String!
  date: String!
  account: String!
  amount: Int!
  postedBy: User
}

type Invoice {
  id: ID!
  customer: String!
  date: String!
  account: String!
  amount: Int!
  postedBy: User
}
